<%
cloudfoundry_releases = %w(
  binary-buildpack
  dotnet-core-buildpack
  go-buildpack
  java-buildpack
  nodejs-buildpack
  php-buildpack
  python-buildpack
  ruby-buildpack
  staticfile-buildpack

  bosh-dns-aliases
  capi
  cf-mysql
  cf-networking
  cf-smoke-tests
  cf-syslog-drain
  cflinuxfs2
  cflinuxfs3
  diego
  garden-runc
  log-cache
  loggregator
  loggregator-agent
  nats
  nfs-volume
  postgres
  routing
  statsd-injector
  syslog
  uaa
)
incubator_releases = %w(bpm pxc bits-service app-autoscaler)
bosh_packages_releases = %w(cf-cli)
pivotal_cf_releases = %w(credhub)
community_releases = %w(eirini-bosh)

releases = cloudfoundry_releases.map { |r| { organization: "cloudfoundry", name: r } }
releases += incubator_releases.map { |r| { organization: "cloudfoundry-incubator", name: r } }
releases += community_releases.map { |r| { organization: "cloudfoundry-community", name: r } }
releases += bosh_packages_releases.map { |r| { organization: "bosh-packages", name: r } }
releases += pivotal_cf_releases.map { |r| { organization: "pivotal-cf", name: r } }

# Some releases aren't available from bosh.io but only from s3
s3_suse_releases = %w(groot-btrfs cf-acceptance-tests brain-tests sync-tests scf-helper)
s3_releases = s3_suse_releases.map { |r| { name: r, bucket: 'suse-final-releases' } }

%>

groups:
  - name: cloudfoundry
    jobs:
    <% cloudfoundry_releases.each do |r| %>
    - build-<%= r %>
    <% end %>
  - name: incubator
    jobs:
    <% incubator_releases.each do |r| %>
    - build-<%= r %>
    <% end %>
  - name: community
    jobs:
    <% community_releases.each do |r| %>
    - build-<%= r %>
    <% end %>
  - name: bosh
    jobs:
    <% bosh_packages_releases.each do |r| %>
    - build-<%= r %>
    <% end %>
  - name: pivotal
    jobs:
    <% pivotal_cf_releases.each do |r| %>
    - build-<%= r %>
    <% end %>
  - name: s3
    jobs:
    <% s3_suse_releases.each do |r| %>
    - build-<%= r %>
    <% end %>
  - name: all
    jobs:
    <% releases.each do |r| %>
    - build-<%= r[:name] %>
    <% end %>

resources:
- name: ci
  type: git
  source:
    uri: ((ci-repo))
    branch: ((ci-branch))
<% releases.each do |release| %>
- name: <%= release[:name] %>-release
  type: bosh-io-release
  check_every: 5m
  source:
    repository: <%= release[:organization] %>/<%= release[:name] %>-release
<% end %>
<% s3_releases.each do |release| %>
- name: <%= release[:name] %>-release
  type: s3
  check_every: 5m
  source:
    bucket: <%= release[:bucket] %>
    regexp: <%= release[:name] %>-release-(.*).tgz
<% end %>
- name: s3.fissile-linux
  type: s3
  check_every: 1m
  source:
    bucket: ((s3-bucket))
    private: true
    regexp: fissile/develop/fissile-(.*)\.tgz

- name: s3.fissile-stemcell-sle-version
  type: s3
  check_every: 1m
  source:
    bucket: ((versions-s3-bucket))
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    versioned_file: fissile-stemcell-versions/fissile-stemcell-sle15-version

- name: s3.kubecf-sources
  type: s3
  source:
    regexp: bosh-releases/(.*)\.tgz
    bucket: ((kubecf-sources-s3-bucket))
    region_name: ((kubecf-sources-s3-bucket-region))
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))

jobs:
<% (releases + s3_releases).each do |release| %>
- name: build-<%= release[:name] %>
  plan:
  - aggregate:
    - get: ci
  - aggregate:
    - get: s3.fissile-stemcell-sle-version
      trigger: true
    - get: <%= release[:name] %>-release
      trigger: true
      params:
        tarball: false
    - get: s3.fissile-linux
      trigger: true
  - do:
    - task: build
      privileged: true
      timeout: 1h30m
      input_mapping:
        release: <%= release[:name] %>-release
        s3.stemcell-version: s3.fissile-stemcell-sle-version
      params:
        GOPROXY: ((goproxy))
        STEMCELL_REPOSITORY: ((stemcell-repository))
        RELEASE_NAME: <%= release[:name] %>
        DOCKER_TEAM_USERNAME: ((dockerhub.username))
        DOCKER_TEAM_PASSWORD_RW: ((dockerhub.password))
        REGISTRY_NAMESPACE: "cfcontainerization"
      file: ci/pipelines/release-images/tasks/build.yml
    - put: s3.kubecf-sources
      params:
        file: s3.kubecf-sources/*
        acl: public-read
<% end %>
