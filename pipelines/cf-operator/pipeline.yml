resources:
- name: src
  type: git
  source:
    uri: ((src-repo))
    branch: ((src-branch))
- name: ci
  type: git
  source:
    uri: ((ci-repo))
    branch: ((ci-branch))
- name: docker.cf-operator-rc
  type: docker-image
  source:
    repository: ((docker-organization))/((docker-candidate-repo))
    username: ((dockerhub.username))
    password: ((dockerhub.password))
- name: docker.cf-operator
  type: docker-image
  source:
    repository: ((docker-organization))/quarks-operator
    username: ((dockerhub.username))
    password: ((dockerhub.password))
- name: ghcr.quarks-operator
  type: docker-image
  source:
    repository: ((ghcr-repository))
    username: ((github.user))
    password: ((github.access-token-push-quarks))
- name: s3.cf-operator
  type: s3
  source:
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    bucket: ((s3.bucketName))
    regexp: binaries/quarks-operator-(.*)
- name: s3.helm-charts
  type: s3
  source:
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    bucket: ((s3.bucketName))
    regexp: helm-charts/quarks-(.*).tgz
- name: s3.build-number
  type: semver
  source:
    driver: s3
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    bucket: ((s3.bucketName))
    key: code-coverage/version
    initial_version: 0.0.0
- name: s3.code-coverage-unit
  type: s3
  source:
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    bucket: ((s3.bucketName))
    regexp: code-coverage/gover-(.*)-unit.coverprofile
- name: s3.code-coverage-integration
  type: s3
  source:
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    bucket: ((s3.bucketName))
    regexp: code-coverage/gover-(.*)-integration.coverprofile
- name: s3.env-dump
  type: s3
  source:
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    bucket: ((s3.bucketName))
    regexp: env_dumps/env_dump-(.*).tar.gz

jobs:
- name: test
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: src
      trigger: true
  - put: s3.build-number
    params:
      bump: patch
  - in_parallel:
    - task: lint
      file: ci/pipelines/tasks/lint.yml
      params:
        GOPROXY: ((goproxy))
    - task: test-unit
      file: ci/pipelines/tasks/test.yml
      params:
        GOPROXY: ((goproxy))
        COVERAGE: true
  - put: s3.code-coverage-unit
    params:
      file: code-coverage/gover-*-unit.coverprofile

- name: build
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: src
      passed: [test]
      trigger: true
    - get: s3.build-number
      passed: [test]
    - get: s3.code-coverage-unit
      passed: [test]
  - task: build
    file: ci/pipelines/tasks/build.yml
    params:
      GOPROXY: ((goproxy))
  - do:
    - put: docker.cf-operator-rc
      params:
        build: src
        build_args:
          GOPROXY: ((goproxy))
        tag: docker/tag

- name: test-integration
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: src
      trigger: true
      passed: [build]
    - get: s3.build-number
      passed: [build]
    - get: s3.code-coverage-unit
      passed: [build]
  - do:
    - in_parallel:
      - task: test-integration
        params:
          ibmcloud_apikey: ((ibmcloud.key-value))
          ibmcloud_server: ((ibmcloud.server))
          ibmcloud_region: ((ibmcloud.region))
          ibmcloud_cluster: ((ibmcloud-cluster))
          ssh_server_ip: ((ssh-server.ip))
          ssh_server_user: ((ssh-server.user))
          ssh_server_key: ((ssh-server.key))
          OPERATOR_TEST_STORAGE_CLASS: ((storageclass))
          DOCKER_IMAGE_REPOSITORY: ((docker-candidate-repo))
          COVERAGE: true
          GOPROXY: ((goproxy))
        file: ci/pipelines/tasks/test-integration.yml
        on_failure:
          do:
          - put: s3.env-dump
            params:
              file: env_dumps/env_dump-*.tar.gz
              acl: public-read
      - task: test-helm-e2e
        params:
          ibmcloud_apikey: ((ibmcloud.key-value))
          ibmcloud_server: ((ibmcloud.server))
          ibmcloud_region: ((ibmcloud.region))
          ibmcloud_cluster: ((ibmcloud-cluster))
          OPERATOR_TEST_STORAGE_CLASS: ((storageclass))
          DOCKER_IMAGE_REPOSITORY: ((docker-candidate-repo))
          GOPROXY: ((goproxy))
        file: ci/pipelines/tasks/test-helm-e2e.yml
        on_failure:
          do:
          - put: s3.env-dump
            params:
              file: env_dumps/env_dump-*.tar.gz
              acl: public-read
  - put: s3.code-coverage-integration
    params:
      file: code-coverage/gover-*-integration.coverprofile

- name: coverage
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: src
      trigger: true
      passed: [test-integration]
    - get: s3.build-number
      passed: [test-integration]
  - get: s3.code-coverage-unit
    passed: [test-integration]
  - get: s3.code-coverage-integration
    passed: [test-integration]
  - task: coverage
    params:
      COVERALLS_TOKEN: ((coveralls-token))
      CONCOURSE : true
      GOPROXY: ((goproxy))
    file: ci/pipelines/cf-operator/tasks/coverage.yml

- name: publish
  plan:
  - in_parallel:
    - get: ci
    - get: src
      passed: [test-integration]
      trigger: true

  - in_parallel:
    - do:
      - task: build
        file: ci/pipelines/tasks/build.yml
        params:
          GOPROXY: ((goproxy))
      - get: docker.cf-operator-rc
        params:
          save: true
          tag: docker/tag
      - in_parallel:
        - put: docker.cf-operator
          params:
            load: docker.cf-operator-rc
            tag: docker/tag
        - put: ghcr.quarks-operator
          params:
            load: docker.cf-operator-rc
            tag: docker/tag
        - put: s3.cf-operator
          params:
            file: binaries/quarks-operator-*
    - do:
      - task: helm
        file: ci/pipelines/tasks/build-helm.yml
      - put: s3.helm-charts
        params:
          file: helm-charts/quarks-*.tgz
          acl: public-read
