# This pipeline will setup the build for all the cf_deployment_releases specified below.

<%
parallel_builds = 5 # How many builds we run in parallel
cf_deployment_tags = %w(v12.4.0 v12.18.0)
releases = %w(binary-buildpack bosh-dns-aliases bpm capi cf-cli cflinuxfs3 cf-networking cf-smoke-tests cf-syslog-drain credhub diego dotnet-core-buildpack garden-runc go-buildpack java-buildpack log-cache loggregator loggregator-agent nats nginx-buildpack nodejs-buildpack php-buildpack pxc python-buildpack r-buildpack routing ruby-buildpack silk staticfile-buildpack statsd-injector uaa)
%>

groups:
<% cf_deployment_tags.each do |cf_deployment_tag| %>
- name: <%= cf_deployment_tag %>
  jobs:
  - prepare-build-<%= cf_deployment_tag %>
  <% releases.each do |release| %>
  - build-<%= cf_deployment_tag %>-<%= release %>
  <% end %>
<% end %>

resources:
- name: ci
  type: git
  source:
    uri: ((ci-repo))
    branch: ((ci-branch))
- name: docker-image-resource
  type: git
  source:
    uri: ((docker-image-resource-repo))
    branch: ((docker-image-resource-branch))
<% cf_deployment_tags.each do |cf_deployment_tag| %>
- name: cf-deployment-<%= cf_deployment_tag %>
  type: git
  source:
    uri: ((cf-deployment-repo))
    branch: ((cf-deployment-branch))
    tag_filter: <%= cf_deployment_tag %>
<% end %>
- name: s3.fissile-linux
  type: s3
  source:
    bucket: ((fissile-linux-s3-bucket))
    private: true
    regexp: fissile/develop/fissile-(.*)\.tgz
- name: s3.fissile-stemcell-version
  type: s3
  source:
    bucket: ((stemcell-versions-s3-bucket))
    region_name: ((stemcell-s3-bucket-region))
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))
    versioned_file: ((stemcell-version-file))
- name: s3.kubecf-sources
  type: s3
  source:
    regexp: bosh-releases/(.*)\.tgz
    bucket: ((kubecf-sources-s3-bucket))
    region_name: ((kubecf-sources-s3-bucket-region))
    access_key_id: ((s3.accessKey))
    secret_access_key: ((s3.secretKey))

jobs:
<% cf_deployment_tags.each do |cf_deployment_tag| %>
  - name: prepare-build-<%= cf_deployment_tag %>
    plan:
    - in_parallel:
      - get: ci
      - get: cf-deployment-<%= cf_deployment_tag %>
      - get: s3.fissile-stemcell-version
        trigger: true
      - get: s3.fissile-linux
        trigger: true
    - do:
      - task: prepare-build
        input_mapping:
          cf-deployment: cf-deployment-<%= cf_deployment_tag %>
        params:
          CF_DEPLOYMENT_YAML: ((cf-deployment-yaml))
          RELEASES: <%= releases.sort.join(" ") %>
        file: ci/pipelines/release-images-cf-deployment/tasks/prepare_build.yml

  <%
  releases.each_with_index do |release, i|
    serial_group = "serial_group_#{i % parallel_builds}"
  %>
  - name: build-<%= cf_deployment_tag %>-<%= release %>
    serial_groups: [ <%= serial_group %> ]
    plan:
    - in_parallel:
      - get: ci
      - get: docker-image-resource
      - get: cf-deployment-<%= cf_deployment_tag %>
      - get: s3.fissile-stemcell-version
        passed: [ prepare-build-<%= cf_deployment_tag %> ]
        trigger: true
      - get: s3.fissile-linux
        passed: [ prepare-build-<%= cf_deployment_tag %> ]
        trigger: true
    - do:
      - task: build
        privileged: true
        timeout: 1h30m
        input_mapping:
          s3.stemcell-version: s3.fissile-stemcell-version
          cf-deployment: cf-deployment-<%= cf_deployment_tag %>
        params:
          GOPROXY: ((goproxy))
          STEMCELL_OS: ((stemcell-os))
          STEMCELL_REPOSITORY: ((stemcell-repository))
          STEMCELL_VERSIONED_FILE: ((stemcell-version-file))
          CF_DEPLOYMENT_YAML: ((cf-deployment-yaml))
          RELEASE: <%= release %>
          DOCKER_REGISTRY: ((docker-registry))
          DOCKER_ORGANIZATION: ((docker-organization))
          DOCKER_TEAM_USERNAME: ((dockerhub.username))
          DOCKER_TEAM_PASSWORD_RW: ((dockerhub.password))
        file: ci/pipelines/release-images-cf-deployment/tasks/build.yml
      - put: s3.kubecf-sources
        params:
          file: s3.kubecf-sources/*
          acl: public-read
  <% end %>
<% end %>
